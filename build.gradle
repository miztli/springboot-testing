plugins {
	id 'org.springframework.boot' version '2.1.3.RELEASE'
	id 'java' // https://docs.gradle.org/current/userguide/java_plugin.html
}

apply plugin: 'io.spring.dependency-management'

group = 'com.example'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '1.8'

repositories {
	mavenCentral()
}

/*
  Creating a new configuration for integration tests.
  Automatically creates:
    - integrationTestImplementation
    - integrationTestCompileOnly
    - integrationTestRuntimeOnly
  It also creates a compileIntegrationTestJava task 
  that will compile all the source files under src/intTest/java
*/
sourceSets {
  integrationTest {
    // add compilation and runtime classpaths for this sourceSet
    compileClasspath += sourceSets.main.output // compiled production classes and resources from: main sourceSet
    runtimeClasspath += sourceSets.main.output
    // indicate sources and resources path
    java.srcDir('src/integration-test/java')
    resources.srcDir('src/integration-test/resources')
  }
}

// add unit test dependencies to integration-test dependencies
configurations {
  integrationTestImplementation.extendsFrom testImplementation 
  integrationTestRuntimeOnly.extendsFrom testRuntimeOnly
}

// dependencies declaration
dependencies {
  implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
  implementation 'org.springframework.boot:spring-boot-starter-web'
  implementation 'com.h2database:h2'
  testCompile 'org.dbunit:dbunit:2.4.9'
  testCompile 'com.github.springtestdbunit:spring-test-dbunit:1.3.0'
  testImplementation 'org.springframework.boot:spring-boot-starter-test'
  testImplementation 'io.rest-assured:rest-assured'
  testImplementation 'io.rest-assured:json-schema-validator'
  testImplementation 'com.github.fge:json-schema-validator:2.2.6'
  testImplementation 'com.github.fge:json-schema-core:1.2.5'
  //testImplementation 'org.codehaus.groovy:groovy-all:2.4.5'
}

// declare integration test task
task integrationTest(type: Test) {
  description = 'Runs integration tests'
  group = 'verification'
  testClassesDirs = sourceSets.integrationTest.output.classesDirs
  classpath = sourceSets.integrationTest.runtimeClasspath
  outputs.upToDateWhen { false } // consider outputs of the integration test task out of date, so that integrationTest task is always run
  shouldRunAfter test // indicate that should run after unit tests
}

// ensure integration tests run before the check task 
// and unit tests are run before integration tests, 
// so in any case test phases fail, our build also fails
check.dependsOn integrationTest

