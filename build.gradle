plugins {
	id 'org.springframework.boot' version '2.1.3.RELEASE'
	id 'java'
}

apply plugin: 'io.spring.dependency-management'

group = 'com.example'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '1.8'

repositories {
	mavenCentral()
}

sourceSets {
  // integrationTestCompile and integrationTestRuntime dependency configurations will be created
  integrationTest {
    java {
      println 'sourceSets.main.output: ' + sourceSets.main.output
      println 'main.output: ' + main.output
      println 'test.output: ' + test.output
      compileClasspath += main.output + test.output 
      runtimeClasspath += main.output + test.output 
      srcDir file('src/integration-test/java')
    } 
    resources.srcDir file('src/integration-test/resources')
  }
}

// add unit test dependencies to integration-test dependencies
configurations {
  integrationTestCompile.extendsFrom testCompile
  integrationTestRuntime.extendsFrom testRuntime
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'com.h2database:h2'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'junit:junit:4.12'
	testImplementation 'com.jayway.restassured:rest-assured:2.8.0'
	testImplementation 'org.codehaus.groovy:groovy-all:2.4.5'
}

// declare integration test task
task integrationTest(type: Test) {
    testClassesDirs = sourceSets.integrationTest.output.classesDirs
    classpath = sourceSets.integrationTest.runtimeClasspath
    outputs.upToDateWhen { false } // consider outputs of the integration test task out of date, so that integrationTest task is always run
}

// ensure integration tests run before the check task and unit tests are run before integration tests, 
// so in any case test phases fail, our build also fails
check.dependsOn integrationTest
integrationTest.mustRunAfter test

